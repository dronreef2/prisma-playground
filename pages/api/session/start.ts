import type { NextApiRequest, NextApiResponse } from 'next'

// Fun√ß√£o para gerar ID √∫nico sem uuid
const generateSessionId = () => {
  const timestamp = Date.now().toString(36)
  const randomPart = Math.random().toString(36).substring(2, 15)
  return `playground_${timestamp}_${randomPart}`
}

type SessionResponse = {
  success: boolean
  sessionId?: string
  error?: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<SessionResponse>
) {
  if (req.method !== 'POST') {
    return res.status(405).json({ success: false, error: 'Method not allowed' })
  }

  try {
    console.log('üöÄ [API] Iniciando cria√ß√£o de sess√£o...')
    
    // Verificar vari√°veis de ambiente
    console.log('üîç [API] DATABASE_URL:', process.env.DATABASE_URL ? 'configurada' : 'n√£o encontrada')
    console.log('üîç [API] DIRECT_URL:', process.env.DIRECT_URL ? 'configurada' : 'n√£o encontrada')
    
    // Gerar ID √∫nico para a sess√£o
    const sessionId = generateSessionId()
    console.log('üìù [API] SessionId gerado:', sessionId)
    
    // Para o client virtual, n√£o precisamos criar schemas
    // O schema ser√° usado automaticamente pelo virtual client
    console.log(`‚úÖ [API] Sess√£o virtual criada: ${sessionId}`)
    
    res.status(200).json({
      success: true,
      sessionId
    })
    
  } catch (error) {
    console.error('‚ùå [API] Erro ao criar sess√£o:', error)
    res.status(500).json({
      success: false,
      error: error instanceof Error ? error.message : 'Erro interno do servidor'
    })
  }
}
